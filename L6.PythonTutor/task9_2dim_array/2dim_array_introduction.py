

# Для обработки и вывода списка, как правило, используют два вложенных цикла.
# Первый цикл перебирает номер строки, второй цикл бежит по элементам внутри строки.
# Например, вывести двумерный числовой список на экран построчно,
# разделяя числа пробелами внутри одной строки, можно так:

# 1.  перебирать массив используя индекс, создаваемый с помощью функции range()
a = [[1, 2, 3, 4], [5, 6], [7, 8, 9]]
for i in range(len(a)):
    for j in range(len(a[i])):
        print(a[i][j], end=' ')
    print()
print()
# перебирать элементы массива
a = [[1, 2, 3, 4], [5, 6], [7, 8, 9]]
for row in a:
    for elem in row:
        print(elem, end=' ')
    print()
print()

# для вывода одной строки можно воспользоваться методом join()
# собираем в строку массив 2-го уровня в каждом цикле 1-го уровня:
a = [[1, 2, 3, 4, 5], [5, 6, 7], [7, 8, 9, 10]]
for row in a:
    print(' '.join([str(elem) for elem in row]))
print()

#  два вложенных цикла с перебром по индексу для подсчета суммы всех чисел в списке:
a = [[1, 2, 3, 4], [5, 6], [7, 8, 9]]
s = 0
for i in range(len(a)):
    for j in range(len(a[i])):
        s += a[i][j]
print(s)
print()

# подсчета суммы всех чисел в списке - с циклом не по индексу, а по значениям строк:
a = [[1, 2, 3, 4], [5, 6], [7, 8, 9]]
s = 0
for row in a:
    for elem in row:
        s += elem
print(s)
print()

################
# Создание вложенных списков
# 1.  сначала создадим список из n элементов (для начала просто из n нулей).
# Затем сделаем каждый элемент списка ссылкой на другой одномерный список из m элементов:
print('Создание вложенных списков')
n = 3
m = 4
a = [0] * n
print(a)
for i in range(n):
    a[i] = [0] * m
print(a)
print()

# 2. Другой (но похожий) способ:
# создать пустой список,
# потом n раз добавить в него новый элемент, являющийся списком-строкой:
n = 3
m = 4
a = []
print(a)
for i in range(n):
    a.append([0] * m)
print(a)
print()

# 3. еще проще воспользоваться генератором:
# создать список из n элементов,
# каждый из которых будет списком, состоящих из m нулей:
# В этом случае каждый элемент создается независимо от остальных
# (заново конструируется список [0] * m для заполнения очередного элемента списка),
# а не копируются ссылки на один и тот же список.
n = 3
m = 4
a = [[0] * m for i in range(n)]
print(a)
print()
##################
# Ввод двумерного массива
print('Ввод двумерного массива')

# программа получает на вход двумерный массив в виде n строк,
# каждая из которых содержит m чисел, разделенных пробелами.
# в первой строке ввода идёт количество строк массива
print('use generator - вложенный вызов')
# n = int(input('n - количество строк: '))
n = 2
a = []
for i in range(n):
    # a.append([int(j) for j in input('string - m чисел, разделенных пробелами: ').split()])
    a.append([int(j) for j in '1 2 3 4 5 6 7 8 9 0'.split()])
print(a)
print()

# без использования сложных вложенных вызовов функций:
# в первой строке ввода идёт количество строк массива
print('more simple code')
#n = int(input('n - количество строк: '))
n = 2
a = []
for i in range(n):
    # row = input('string - m чисел, разделенных пробелами: ').split()
    row = '1 2 3 4 5 6'.split()
    for i in range(len(row)):
        row[i] = int(row[i])
    a.append(row)
print(a)
print()

# то же самое и при помощи генератора
n = int(input())
a = [[int(j) for j in input().split()] for i in range(n)]
